[game]
# Phase 4: Manual Combat Testing Configuration
# This config enables testing of the coordinate-based combat positioning system

# Game Mode Settings
testmode = True
skipdialog = True
skipintro = True

# Starting Configuration
startmap = testing-map
startposition = 1, 1

# Graphics & Performance
use_colour = True
enable_animations = True
animation_speed = 1.0

# Debug Settings - ENABLED FOR PHASE 4 TESTING
# NOTE: These settings are currently PLACEHOLDER and not yet implemented in game code.
#       When implemented, debug_mode will:
#       - Enable verbose logging of coordinate calculations to combat_testing_phase4.log
#       - Display unit positions and facing directions during combat
#       - Show distance calculations between units
#       - Display damage/accuracy modifiers applied to attacks
#       - Log NPC AI decision-making process
#       - Track all position changes in real-time
#       Implementation required in: combat.py, moves.py, npc.py
debug_mode = True
debug_positions = True
debug_movement = True
debug_damage_calc = True
debug_accuracy = True
debug_ai_decisions = True
debug_npc_positions = True

# Coordinate System Settings
coordinate_grid_size = 50, 50

# Combat Settings
enable_new_combat_moves = True
enable_flanking_mechanics = True
enable_tactical_positioning = True

# NPC AI Settings
npc_flanking_enabled = True
npc_tactical_retreat = True
ai_difficulty = 3

# Save/Load Settings
autosave_enabled = False
allow_quicksave = True
auto_load_latest = False

# Display Settings
show_combat_distance = True
show_unit_positions = True
show_facing_directions = True
show_damage_modifiers = True
show_accuracy_modifiers = True

# Logging Settings
log_combat_moves = True
log_distance_calculations = True
log_angle_calculations = True
log_npc_decisions = True
log_file = combat_testing_phase4.log

# Scenario Testing (enables specific scenario type)
# Set to: standard, pincer, melee, boss_arena
test_scenario = standard

# NPC Spawn Configuration
max_enemies_standard = 3
max_enemies_pincer = 4
max_enemies_melee = 6
max_enemies_boss = 1

# Performance Monitoring
# monitor_bps tracks combat's beats per second while not waiting for player decisions.
# Disabled outside of combat.
monitor_bps = True
log_performance = True

# Visibility Settings
show_full_grid = False ; # Periodically show full battle grid instead of the default, localized view
grid_display_interval = 1 ; in beats
show_coordinate_display = True

[development]
# Development-specific settings

# Code Reloading
# NOTE: This setting is currently PLACEHOLDER and not yet implemented in game code.
#       When implemented, enable_hot_reload will:
#       - Automatically reload modified Python modules during runtime
#       - Allow testing changes without restarting the game
#       - Monitor source files in src/ for changes
#       - Trigger module reloading via importlib.reload()
#       - Update map tiles on the fly
#       - Useful for rapid iteration on combat/positioning changes
#       - May cause issues with cached class references if not handled carefully
#       Implementation required in: game.py, __main__.py, or dedicated hot_reload.py module
enable_hot_reload = False

# Testing Features
# NOTE: These settings are currently PLACEHOLDER and not yet implemented in game code.

# show_all_items: When implemented, will:
#       - Disable item hiding/discovery mechanics (hidden flag ignored)
#       - Show all items on tiles regardless of hide_factor difficulty
#       - Bypass merchandise purchase restrictions
#       - Useful for testing item placement and loot table configuration
#       - Would affect: items_here display, item discovery messages, shop logic
#       Implementation required in: functions.py (discovery logic), player.py (item pickup)
show_all_items = False
god_mode = False ; Automatically triggers ss mode
skip_combat = False ; Automatically win all combats for testing

[combat_testing]
# Phase 4 Specific Combat Testing

# Test Different Scenarios
# NOTE: This setting is currently PLACEHOLDER and not yet implemented in game code.
#       When implemented, enable_scenario_rotation will:
#       - Automatically cycle through all 4 combat scenarios (standard, pincer, melee, boss_arena)
#       - After each combat ends, spawn next scenario without returning to map
#       - Allow rapid testing of positioning mechanics across all encounter types
#       - Each scenario uses current_scenario value, then advances to next after victory/defeat
#       - Useful for Phase 4 to validate:
#         * Standard formation spacing and flanking potential
#         * Pincer ambush enemy positioning and multi-threat handling
#         * Melee chaos close-quarters combat dynamics
#         * Boss arena 1v1 mechanics with large distances
#       - Would integrate with: combat.py (post-combat logic), Universe (scenario spawn)
#       Implementation required in: combat.py (trigger next scenario), config reading in game.py
enable_scenario_rotation = False
current_scenario = standard

# Difficulty Progression
starting_difficulty = 3
difficulty_scaling = 0.5

# Combat Duration
max_rounds_before_auto_victory = 50 ; The maximum number of rounds before combat auto-ends in victory for the player. Allows proceeding to next scenario, if enabled.

# NPC AI Parameters
npc_decision_delay = 0.5
npc_flanking_threshold = 45.0
npc_retreat_health_threshold = 0.3
npc_flanking_distance_range = 20.0 to 40.0

# Positioning Validation
validate_grid_bounds = True
validate_distance_calc = True
validate_angle_calc = True
validate_modifier_calc = True
validate_npc_formations = True

# Damage Modifier Ranges (verify these in test)
# Front Attack: 0.80x to 0.90x (-10% to -20%)
# Flank Attack: 1.10x to 1.20x (+10% to +20%)
# Deep Flank: 1.20x to 1.30x (+20% to +30%)
# Rear Attack: 1.35x to 1.45x (+35% to +45%)

[testing_locations]
# Configure testing map locations

# Standard formation testing
standard_player_x = 25
standard_player_y = 10
standard_enemy_x = 25
standard_enemy_y = 40

# Pincer formation testing
pincer_player_x = 25
pincer_player_y = 25
pincer_enemy1_x = 10
pincer_enemy1_y = 25
pincer_enemy2_x = 40
pincer_enemy2_y = 25

# Melee testing
melee_center_x = 25
melee_center_y = 25
melee_spread_radius = 5

# Boss arena testing
boss_arena_x = 25
boss_arena_y = 25
boss_start_distance = 30

# NOTE: Debug commands are now defined in DEBUG-COMMANDS-IMPLEMENTATION-PLAN.md
# They are always available during combat when debug_mode = True
# and do NOT need to be configured in this INI file.
# See DEBUG-COMMANDS-IMPLEMENTATION-PLAN.md for implementation details.
